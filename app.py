import streamlit as st
import pandas as pd
import numpy as np
import yaml
import plotly.express as px
import matplotlib.pyplot as plt
import shap
from catboost import CatBoostClassifier

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à–∏ –º–æ–¥—É–ª–∏ —Å –ª–æ–≥–∏–∫–æ–π
from src.preprocessing import preprocess_for_inference
from src.inference import predict_scores

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã ---
st.set_page_config(
    page_title="–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∏—Å–∫–æ–≤",
    page_icon="‚öïÔ∏è",
    layout="wide"
)

# --- –ö—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ ---

@st.cache_resource
def load_config(config_path: str = 'config/config.yaml') -> dict:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª."""
    try:
        with open(config_path, 'r', encoding='utf-8') as f:
            return yaml.safe_load(f)
    except FileNotFoundError:
        st.error(f"–û—à–∏–±–∫–∞: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –ø—É—Ç–∏ '{config_path}'")
        return None

@st.cache_resource
def load_model(model_path: str) -> CatBoostClassifier:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –º–æ–¥–µ–ª—å –æ–¥–∏–Ω —Ä–∞–∑ –∏ –∫—ç—à–∏—Ä—É–µ—Ç –µ–µ."""
    return pd.read_pickle(model_path)

@st.cache_data
def get_shap_values(_model: CatBoostClassifier, data: pd.DataFrame):
    """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç SHAP –∑–Ω–∞—á–µ–Ω–∏—è –æ–¥–∏–Ω —Ä–∞–∑ –∏ –∫—ç—à–∏—Ä—É–µ—Ç –∏—Ö –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏."""
    explainer = shap.TreeExplainer(_model)
    shap_values = explainer(data)
    return shap_values

@st.cache_data
def convert_df_to_csv(df: pd.DataFrame) -> bytes:
    """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç DataFrame –≤ CSV —Ñ–æ—Ä–º–∞—Ç –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è."""
    return df.to_csv(index=False).encode('utf-8')


# --- –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏ –º–æ–¥–µ–ª–∏ –≤ –Ω–∞—á–∞–ª–µ ---
config = load_config()
if config is None:
    st.stop()
    
model = load_model(config['paths']['model'])

# --- –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å (Sidebar) ---
st.sidebar.title("‚ÑπÔ∏è –û –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏")
st.sidebar.info(
    "–≠—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–æ –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∏—Å–∫–∞ –Ω–µ–±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã—Ö "
    "—Å–µ—Ä–¥–µ—á–Ω–æ-—Å–æ—Å—É–¥–∏—Å—Ç—ã—Ö —Å–æ–±—ã—Ç–∏–π —É –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤."
    "\n\n**–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:**"
    "\n1. –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ `.csv` –∏–ª–∏ `.xlsx`."
    "\n2. –î–æ–∂–¥–∏—Ç–µ—Å—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∫–∏."
    "\n3. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ —Å–∫–æ—Ä—ã –∏ —Å–∫–∞—á–∞–π—Ç–µ –∏—Ç–æ–≥–æ–≤—É—é —Ç–∞–±–ª–∏—Ü—É."
)


# --- –û—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ---
st.title(config['app']['title'])
st.markdown(
    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞. "
    "–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏ –¥–æ–±–∞–≤–∏—Ç —Å—Ç–æ–ª–±–µ—Ü —Å–æ —Å–∫–æ—Ä–æ–º —Ä–∏—Å–∫–∞."
)

uploaded_file = st.file_uploader(
    "–í—ã–±–µ—Ä–∏—Ç–µ CSV –∏–ª–∏ XLSX —Ñ–∞–π–ª",
    type=['csv', 'xlsx'],
    label_visibility="collapsed"
)

if uploaded_file is not None:
    with st.spinner('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ. –ò–¥–µ—Ç –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö...'):
        try:
            # --- –®–∞–≥ 1: –ß—Ç–µ–Ω–∏–µ –∏ –±–∞–∑–æ–≤–∞—è –æ—á–∏—Å—Ç–∫–∞ —Ñ–∞–π–ª–∞ ---
            if uploaded_file.name.endswith('.csv'):
                raw_df = pd.read_csv(uploaded_file)
            else:
                raw_df = pd.read_excel(uploaded_file)

            if '‚Ññ –ø/–ø' in raw_df.columns:
                raw_df.drop(columns=['‚Ññ –ø/–ø'], inplace=True)

            for col in raw_df.columns:
                if raw_df[col].dtype == 'object':
                    raw_df[col] = raw_df[col].str.strip()
                    raw_df[col].replace('', np.nan, inplace=True)
            
            raw_df.index.name = 'patient_id'
            
            # --- –®–∞–≥ 2: –ì–ª—É–±–æ–∫–∞—è –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö ---
            processed_df, raw_df_cleaned, all_warnings = preprocess_for_inference(raw_df, config)

            if all_warnings:
                warning_details = "\n\n".join(f"- {w}" for w in all_warnings)
                st.warning(
                    "‚ö†Ô∏è **–í–Ω–∏–º–∞–Ω–∏–µ: –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —Å—Ç—Ä–æ–∫–∏ –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö.**\n\n"
                    f"{warning_details}"
                )
            
            if raw_df_cleaned.empty:
                st.error("‚ùå –ü–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å –Ω–∏ –æ–¥–Ω–æ–≥–æ –ø–∞—Ü–∏–µ–Ω—Ç–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à —Ñ–∞–π–ª.")
                st.stop()
            
            # --- –®–∞–≥ 3: –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π ---
            result_df = predict_scores(model, raw_df_cleaned, processed_df, config)
            st.success('‚úÖ –ê–Ω–∞–ª–∏–∑ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω!')

            # --- –®–∞–≥ 4: –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ ---
            st.markdown("### –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è")
            st.dataframe(result_df)
            st.markdown("---")

            # --- –®–∞–≥ 5: –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ ---
            
            # 5.1 –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–∫–æ—Ä–æ–≤
            st.markdown("### –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–∫–æ—Ä–æ–≤ —Ä–∏—Å–∫–∞")
            score_col = config['app']['output_score_column']
            fig_hist = px.histogram(
                result_df,
                x=score_col,
                title='–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–∫–æ—Ä–æ–≤ —Ä–∏—Å–∫–∞ —Å—Ä–µ–¥–∏ –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤',
                labels={score_col: '–°–∫–æ—Ä —Ä–∏—Å–∫–∞'},
                nbins=20
            )
            st.plotly_chart(fig_hist, use_container_width=True)

            shap_values = get_shap_values(model, processed_df)


            # 5.2 –ì–ª–æ–±–∞–ª—å–Ω–∞—è –≤–∞–∂–Ω–æ—Å—Ç—å –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ (Beeswarm plot)
            st.markdown("### –û–±—â–∞—è –≤–∞–∂–Ω–æ—Å—Ç—å –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ (Global Feature Importance)")
            st.info(
                "–≠—Ç–æ—Ç –≥—Ä–∞—Ñ–∏–∫ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤–ª–∏—è–Ω–∏–µ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–∑–Ω–∞–∫–∞ –Ω–∞ –ø—Ä–æ–≥–Ω–æ–∑ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–∞—Ü–∏–µ–Ω—Ç–∞. "
                "–ö–∞–∂–¥–∞—è —Ç–æ—á–∫–∞ ‚Äî –æ–¥–∏–Ω –ø–∞—Ü–∏–µ–Ω—Ç. –ü–æ–ª–æ–∂–µ–Ω–∏–µ –ø–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç, –ø–æ–≤—ã—à–∞–µ—Ç (–≤–ø—Ä–∞–≤–æ) –∏–ª–∏ –ø–æ–Ω–∏–∂–∞–µ—Ç (–≤–ª–µ–≤–æ) "
                "–∑–Ω–∞—á–µ–Ω–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–∞ –∏—Ç–æ–≥–æ–≤—ã–π —Ä–∏—Å–∫. –¶–≤–µ—Ç —Ç–æ—á–∫–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤–µ–ª–∏—á–∏–Ω—É —Å–∞–º–æ–≥–æ –ø—Ä–∏–∑–Ω–∞–∫–∞ (–∫—Ä–∞—Å–Ω—ã–π ‚Äî –≤—ã—Å–æ–∫–∏–π, —Å–∏–Ω–∏–π ‚Äî –Ω–∏–∑–∫–∏–π)."
            )
            
            fig_importance, ax_importance = plt.subplots()
            # –ó–∞–º–µ–Ω—è–µ–º summary_plot –Ω–∞ beeswarm, –∫–∞–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º –∫–æ–¥–µ 
            shap.plots.beeswarm(shap_values, max_display=11, show=False)
            st.pyplot(fig_importance)
            plt.close(fig_importance)


            # 5.3 –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Ä–∞–∑–±–æ—Ä –ø—Ä–æ–≥–Ω–æ–∑–∞ (Waterfall plot)
            st.markdown("### –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–≥–Ω–æ–∑–∞ –¥–ª—è –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –ø–∞—Ü–∏–µ–Ω—Ç–∞")
            st.info("–í—ã–±–µ—Ä–∏—Ç–µ ID –ø–∞—Ü–∏–µ–Ω—Ç–∞ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã –≤—ã—à–µ, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å, –∫–∞–∫–∏–µ —Ñ–∞–∫—Ç–æ—Ä—ã –∏ –≤ –∫–∞–∫–æ–π —Å—Ç–µ–ø–µ–Ω–∏ (–≤–∫–ª–∞–¥ –≤ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å) –ø–æ–≤–ª–∏—è–ª–∏ –Ω–∞ –µ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Å–∫–æ—Ä —Ä–∏—Å–∫–∞.")
            
            patient_ids_for_selection = raw_df_cleaned.index.tolist()
            
            selected_patient_id = st.selectbox(
                "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ü–∏–µ–Ω—Ç–∞:",
                options=patient_ids_for_selection
            )
            
            if selected_patient_id is not None:
                positional_index = patient_ids_for_selection.index(selected_patient_id)
                
                st.write(f"**–†–∞–∑–±–æ—Ä –ø—Ä–æ–≥–Ω–æ–∑–∞ –¥–ª—è –ø–∞—Ü–∏–µ–Ω—Ç–∞ {selected_patient_id}**")
                
                fig_waterfall, ax_waterfall = plt.subplots()
                shap.plots.waterfall(shap_values[positional_index], max_display=10, show=False)
                st.pyplot(fig_waterfall)
                plt.close(fig_waterfall)

            # –ö–Ω–æ–ø–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
            csv_data = convert_df_to_csv(result_df)
            st.download_button(
                label="üì• –°–∫–∞—á–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ CSV",
                data=csv_data,
                file_name=f'predictions_{uploaded_file.name}.csv',
                mime='text/csv',
            )

        except (ValueError, FileNotFoundError) as e:
            st.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}")
        except Exception as e:
            st.error(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")

else:
    st.info("–û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞...")